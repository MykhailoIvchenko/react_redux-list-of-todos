{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","id","title","completed","userId","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","TodoList","dispatch","getTodosToDisplay","todosFromDb","curQuery","curStatus","filteredTodos","includes","length","className","map","Fragment","onClick","setCurrentTodo","TodoFilter","setQuery","onSubmit","event","preventDefault","onChange","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","name","email","phone","user","setUser","useEffect","console","log","result","catch","href","App","isLoaded","setIsLoaded","error","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09af2c26.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/SET':\n      return {\n        ...action.payload,\n      };\n\n    case 'currentTodo/REMOVE':\n      return {\n        id: 0,\n        title: '',\n        completed: false,\n        userId: 0,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\n// export type StatusType = 'all' | 'completed' | 'active';\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: string;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: string): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype State = {\n  query: string,\n  status: string,\n};\n\ntype Action = SetStatusAction | SetQueryAction;\n\nconst filterReducer = (\n  state: State = {\n    query: '',\n    status: 'all',\n  },\n  action: Action,\n) : State => {\n  switch ((action.type)) {\n    case 'filter/SET_QUERY': {\n      return {\n        ...state,\n        query: action.payload,\n      };\n    }\n\n    case 'filter/SET_STATUS': {\n      return <State>{\n        ...state,\n        status: action.payload,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo [];\n};\n\nconst setTodos = (todos: Todo []): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo [] | [];\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): State => {\n  switch ((action.type)) {\n    case 'todos/SET': {\n      return action.payload;\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const query = useAppSelector(state => state.filter.query);\n  const status = useAppSelector(state => state.filter.status);\n\n  const dispatch = useDispatch();\n\n  const setCurrentTodo = (todo: Todo) => dispatch(actions.setTodo(todo));\n\n  const getTodosToDisplay = (todosFromDb: Todo [], curQuery: string, curStatus: string) : Todo [] => {\n    let filteredTodos = [];\n\n    switch (curStatus) {\n      case 'completed':\n        filteredTodos = todosFromDb.filter((todo: Todo) => todo.completed);\n        break;\n      case 'active':\n        filteredTodos = todosFromDb.filter((todo: Todo) => !todo.completed);\n        break;\n      default:\n        filteredTodos = todosFromDb;\n    }\n\n    let searchTodos = [];\n\n    if (query) {\n      searchTodos = filteredTodos.filter((todo: Todo) => todo.title.includes(curQuery));\n    } else {\n      searchTodos = filteredTodos;\n    }\n\n    return searchTodos;\n  };\n\n  return (\n    <>\n      {getTodosToDisplay(todos, query, status).length > 0\n        ? (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {getTodosToDisplay(todos, query, status).map(todo => (\n                <React.Fragment key={todo.id}>\n                  <tr data-cy=\"todo\" className={todo.id === currentTodo?.id ? 'has-background-info-light' : ''}>\n                    <td className=\"is-vcentered\">\n                      {todo.id}\n                    </td>\n                    <td className=\"is-vcentered\"> </td>\n\n                    <td className=\"is-vcentered is-expanded\">\n                      <p className={todo.completed ? 'has-text-success' : 'has-text-danger'}>\n                        {todo.title}\n                      </p>\n                    </td>\n\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => setCurrentTodo(todo)}\n                      >\n                        <span className=\"icon\">\n                          <i className={todo.id === currentTodo?.id ? 'far fa-eye-slash' : 'far fa-eye'} />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        )\n        : (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions } from '../../features/filter';\nimport { useAppSelector } from '../../app/hooks';\n\nexport const TodoFilter: React.FC = () => {\n  const query = useAppSelector(state => state.filter.query);\n\n  const dispatch = useDispatch();\n\n  const setQuery = (curQuery: string) => dispatch(actions.setQuery(curQuery));\n  // eslint-disable-next-line max-len\n  const setStatus = (curStatus: string) => dispatch(actions.setStatus(curStatus));\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => {\n              setStatus(event.target.value);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={(event) => setQuery(event.target.value)}\n          value={query}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setQuery('')}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const [user, setUser] = useState<User>({\n    id: 0,\n    name: '',\n    email: '',\n    phone: '',\n  });\n\n  useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.log(currentTodo);\n\n    if (currentTodo?.id) {\n      // eslint-disable-next-line no-console\n      console.log(currentTodo.id);\n\n      getUser(currentTodo.id).then((result: User) => setUser(result))\n        .catch(() => setUser({\n          id: 15,\n          name: 'User wasn\\'t found',\n          email: 'User wasn\\'t found',\n          phone: 'User wasn\\'t found',\n        }));\n    }\n  }, [currentTodo]);\n\n  const dispatch = useDispatch();\n\n  const removeCurrentTodo = () => dispatch(actions.removeTodo());\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user?.name\n        ? (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => removeCurrentTodo()}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {/* For not completed */}\n                {currentTodo?.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )\n        : <Loader />}\n\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\nimport { Todo } from './types/Todo';\nimport { useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const dispatch = useDispatch();\n  const setTodos = (todos: Todo []) => dispatch(actions.setTodos(todos));\n\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    getTodos().then(result => {\n      setIsLoaded(true);\n      setTodos(result);\n    }).catch(error => {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoaded\n                ? (\n                  <>\n                    <TodoList />\n                    {/* eslint-disable-next-line react/button-has-type */}\n                    {/* <button */}\n                    {/*   onClick={() => { */}\n                    {/*     // eslint-disable-next-line no-console */}\n                    {/*     console.log('clicked'); */}\n\n                    {/*     // eslint-disable-next-line no-console */}\n                    {/*     console.log(currentTodo); */}\n                    {/*   }} */}\n                    {/* > */}\n                    {/*   Check current */}\n                    {/* </button> */}\n                  </>\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo?.title\n        && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}